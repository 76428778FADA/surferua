package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"text/template"

	"gopkg.in/yaml.v2"

	"go.zoe.im/surferua"
	"io"
	"log"
	"path"
)

const botDBTempl = `// DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED BY "gen/gen-db.go". //
/*
 * Copyright (c) 2018 wellwell.work, LLC by Zoe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package surferua

func init () {
	botDBSize = {{len .}}
	botDB = []string {
	{{range $_, $fullString := . }}	"{{$fullString}}",
	{{end}}}
}

{{range $name, $fullString := . }}// NewBot{{$name | FirstToUpper}} returns full user-agent string of {{$name}}.
func NewBot{{$name | FirstToUpper}}() string {
	return "{{$fullString}}"
}
{{end}}
`

const browserDBTempl = `// DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED BY "gen/gen-db.go". //
/*
 * Copyright (c) 2018 wellwell.work, LLC by Zoe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package surferua

func init () {
	browserDBSize = {{len .}}
	browserDB = []BrowserInfo{
	{{range $_, $bi := . }}	{
			Name: "{{$bi.Name}}",
			EngineInfo: EngineInfo{
				Name: "{{$bi.EngineInfo.Name}}",
				VersionInfo: VersionInfo{
					Major: Endpoint{Start: {{$bi.EngineInfo.VersionInfo.Major.Start}}, End: {{$bi.EngineInfo.VersionInfo.Major.End}}},
					Minor: Endpoint{Start: {{$bi.EngineInfo.VersionInfo.Minor.Start}}, End: {{$bi.EngineInfo.VersionInfo.Minor.End}}},
					Patch: Endpoint{Start: {{$bi.EngineInfo.VersionInfo.Patch.Start}}, End: {{$bi.EngineInfo.VersionInfo.Patch.End}}},
				},
			},
			VersionInfo: VersionInfo{
				Major: Endpoint{Start: {{$bi.VersionInfo.Major.Start}}, End: {{$bi.VersionInfo.Major.End}}},
				Minor: Endpoint{Start: {{$bi.VersionInfo.Minor.Start}}, End: {{$bi.VersionInfo.Minor.End}}},
				Patch: Endpoint{Start: {{$bi.VersionInfo.Patch.Start}}, End: {{$bi.VersionInfo.Patch.End}}},
			},
		},
	{{end}}}
}

{{range $i, $bi := . }}
// {{$bi.Name | FirstToUpper}} returns Specified browser: {{$bi.Name}}
func (ua *UserAgent) {{$bi.Name | FirstToUpper}} () *UserAgent {
	ua.browser = browserDB[{{$i}}].Random()
	return ua
}
{{end}}
`

const platformDBTempl = `// DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED BY "gen/gen-db.go". //
/*
 * Copyright (c) 2018 wellwell.work, LLC by Zoe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package surferua

import (
	"math/rand"
)

func init () {
	platformTypeSize = {{len .Types}}
	// {{.Types}}
	platformSize = []int{ {{range $_, $v := .PlatformList}}{{len $v}}, {{end}}}
	platformDB = [][]PlatformInfo{ {{range $_, $v := .PlatformList}}
		{ {{range $_, $vv := $v}}
			{
				Name: "{{$vv.Name}}",
				VersionInfo: VersionInfo{
					Major: Endpoint{Start: {{$vv.VersionInfo.Major.Start}}, End: {{$vv.VersionInfo.Major.End}}},
					Minor: Endpoint{Start: {{$vv.VersionInfo.Minor.Start}}, End: {{$vv.VersionInfo.Minor.End}}},
					Patch: Endpoint{Start: {{$vv.VersionInfo.Patch.Start}}, End: {{$vv.VersionInfo.Patch.End}}},
				},
			},{{end}}
		},
	{{end}}}
}

{{range $i, $v := .PlatformList}}
// {{index $.Types $i | FirstToUpper}} returns UA with type: {{index $.Types $i}}
func (ua *UserAgent) {{index $.Types $i | FirstToUpper}} () (*UserAgent) {
	ua.platform = platformDB[{{$i}}][rand.Intn(platformSize[{{$i}}])].Random()
	return ua
}
{{end}}

{{range $i, $v := .PlatformList}}
{{range $ii, $vv := $v}}//
// {{$vv.Name | FirstToUpper}} returns UA with target: {{$vv.Name}}
func (ua *UserAgent) {{$vv.Name | FirstToUpper}} () (*UserAgent) {
	ua.platform = platformDB[{{$i}}][{{$ii}}].Random()
	return ua
}
{{end}}
{{end}}
`

func firstLetterUpper(s string) string {
	if len(s) < 2 {
		return strings.ToLower(s)
	}

	bts := []byte(s)
	lc := bytes.ToUpper([]byte{bts[0]})
	rest := bts[1:]
	return string(bytes.Join([][]byte{lc, rest}, nil))
}

var funcMap = template.FuncMap{
	"FirstToUpper": firstLetterUpper,
}

func swapFile(from, to string, flag int, perm os.FileMode) error {
	dist, err := os.OpenFile(to, flag, perm)
	if err != nil {
		return err
	}
	source, err := os.Open(from)
	if err != nil {
		return err
	}

	_, err = io.Copy(dist, source)
	if err != nil {
		return err
	}
	return nil
}

func withWriteSafe(name string, flag int, perm os.FileMode, action func(w io.Writer) error) error {

	var backup bool
	var tmp = os.TempDir()

	// if file exits we need to backup first
	_, err := os.Stat(name)
	if err == nil || !os.IsNotExist(err) {
		// we need to backup files
		log.Printf("[INFO] %s exits, backup it at first", name)
		err = swapFile(name, path.Join(tmp, name), flag, perm)
		if err != nil {

			// backup failed we will return
			log.Printf("[ERROR] backup %s failed, we will do nothing", name)
			return err
		} else {
			backup = true
		}
	}

	// open file and write
	f, err := os.OpenFile(name, flag, perm)
	defer f.Close()
	if err != nil {
		log.Println("open %s error", name)
		return err
	}

	err = action(f)

	if backup {

		if err != nil {
			// write file failed, make backup restore
			log.Print(err)
			log.Printf("[INFO] something wrong happend, we need to restore %s from backup", name)
			err = swapFile(path.Join(tmp, name), name, flag, perm)
		}

		// we need to clear
		if err == nil {
			// clear backup
			log.Printf("[INFO] update file success, delete %s's backup", name)
			os.Remove(path.Join(tmp, name))
		} else {
			// restore failed
			// ......
			// I don't know what should I do
			log.Println("[ERROR] I'm so sorry, I can't restore %s for you", name)
			return err
		}
	}

	return err
}

func genBotDB(path string, bots interface{}) error {
	// Generate db embedded go program.
	tmpl := template.New(path).Funcs(funcMap)
	mimeTmpl, err := tmpl.Parse(botDBTempl)
	if err != nil {
		return err
	}

	return withWriteSafe(path, os.O_CREATE|os.O_WRONLY, 0644, func(writer io.Writer) error {
		return mimeTmpl.Execute(writer, bots)
	})
}

func genBrowserDB(path string, browsers interface{}) error {
	// Generate db embedded go program.
	tmpl := template.New(path).Funcs(funcMap)
	mimeTmpl, err := tmpl.Parse(browserDBTempl)
	if err != nil {
		return err
	}

	browsersList := surferua.NewBrowserInfoList(browsers.(map[interface{}]interface{}))
	return withWriteSafe(path, os.O_CREATE|os.O_WRONLY, 0644, func(writer io.Writer) error {
		return mimeTmpl.Execute(writer, browsersList)
	})
}

func genPlatformDB(path string, platforms interface{}) error {
	// NewPlatformInfoList

	// Generate db embedded go program.
	tmpl := template.New(path).Funcs(funcMap)
	mimeTmpl, err := tmpl.Parse(platformDBTempl)
	if err != nil {
		return err
	}

	types, platformsList := surferua.NewPlatformInfoList(platforms.(map[interface{}]interface{}))
	return withWriteSafe(path, os.O_CREATE|os.O_WRONLY, 0644, func(writer io.Writer) error {
		return mimeTmpl.Execute(writer, struct {
			Types        []string
			PlatformList [][]*surferua.PlatformInfo
		}{types, platformsList})
	})
}

func main() {
	// Take input YAML file from command-line".

	if len(os.Args) != 2 {
		fmt.Print("Syntax:\n\tgen-db /path/to/data.yml\n")
		os.Exit(1)

	}

	var yamlFile = os.Args[1]

	// Load and convert data.yml into new database with name
	// as key.

	// Access embedded "db.json" inside go-bindata.
	yamlBytes, err := ioutil.ReadFile(yamlFile)
	if err != nil {
		panic(err)
	}

	var data = map[string]interface{}{}

	if yaml.Unmarshal(yamlBytes, data) != nil {
		panic(err)
	}

	// Generate botDB.go
	bots := data["bots"].(map[interface{}]interface{})
	err = genBotDB("DB_bot.go", bots)
	if err != nil {
		panic(err)
	}

	// Generate normal browser DB.go
	browsers := data["browsers"].(map[interface{}]interface{})
	err = genBrowserDB("DB_browser.go", browsers)
	if err != nil {
		panic(err)
	}

	// Generate normal platform DB.go
	platforms := data["platforms"].(map[interface{}]interface{})
	err = genPlatformDB("DB_platform.go", platforms)
	if err != nil {
		panic(err)
	}
}
