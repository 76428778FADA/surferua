package main

import (
	"bytes"
	"fmt"
	"gopkg.in/yaml.v2"
	"io/ioutil"
	"os"
	"strings"
	"text/template"

	"github.com/jiusanzhou/surferua"
)

const botDBTempl = `// DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED BY "cmd/gen-db.go". //
/*
 * bot: Bot list, (C) 2017 Zoe.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package surferua

func init() {
	botDBSize = {{len .}}
	botDB = []string {
	{{range $_, $fullString := . }}	"{{$fullString}}",
	{{end}}}
}

{{range $name, $fullString := . }}
// Get full user-agent string of {{$name}}.
func NewBot{{$name | FirstToUpper}}() string {
	return "{{$fullString}}"
}
{{end}}
`

const browserDBTempl = `// DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED BY "cmd/gen-db.go". //
/*
 * bot: Browser's User-Agent list, (C) 2017 Zoe.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package surferua

func init() {
	browserDBSize = {{len .}}
	browserDB = []BrowserInfo{
	{{range $_, $bi := . }}	{
			Name: "{{$bi.Name}}",
			EngineInfo: EngineInfo{
				Name: "{{$bi.EngineInfo.Name}}",
				VersionInfo: VersionInfo{
					Major: Endpoint{Start: {{$bi.EngineInfo.VersionInfo.Major.Start}}, End: {{$bi.EngineInfo.VersionInfo.Major.End}}},
					Minor: Endpoint{Start: {{$bi.EngineInfo.VersionInfo.Minor.Start}}, End: {{$bi.EngineInfo.VersionInfo.Minor.End}}},
					Patch: Endpoint{Start: {{$bi.EngineInfo.VersionInfo.Patch.Start}}, End: {{$bi.EngineInfo.VersionInfo.Patch.End}}},
				},
			},
			VersionInfo: VersionInfo{
				Major: Endpoint{Start: {{$bi.VersionInfo.Major.Start}}, End: {{$bi.VersionInfo.Major.End}}},
				Minor: Endpoint{Start: {{$bi.VersionInfo.Minor.Start}}, End: {{$bi.VersionInfo.Minor.End}}},
				Patch: Endpoint{Start: {{$bi.VersionInfo.Patch.Start}}, End: {{$bi.VersionInfo.Patch.End}}},
			},
		},
	{{end}}}
}

{{range $i, $bi := . }}
// Specify browser: {{$bi.Name}}
func (ua *UserAgent) {{$bi.Name | FirstToUpper}}() *UserAgent {
	ua.Browser = browserDB[{{$i}}].Random()
	return ua
}
{{end}}
`

const platformDBTempl = `// DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED BY "cmd/gen-db.go". //
/*
 * bot: Platform list, (C) 2017 Zoe.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package surferua

import (
	"math/rand"
)

func init() {
	platformTypeSize = {{len .Types}}
	// {{.Types}}
	platformSize = []int{ {{range $_, $v := .PlatformList}}{{len $v}}, {{end}}}
	platformDB = [][]PlatformInfo{ {{range $_, $v := .PlatformList}}
		{ {{range $_, $vv := $v}}
			{
				Name: "{{$vv.Name}}",
				VersionInfo: VersionInfo{
					Major: Endpoint{Start: {{$vv.VersionInfo.Major.Start}}, End: {{$vv.VersionInfo.Major.End}}},
					Minor: Endpoint{Start: {{$vv.VersionInfo.Minor.Start}}, End: {{$vv.VersionInfo.Minor.End}}},
					Patch: Endpoint{Start: {{$vv.VersionInfo.Patch.Start}}, End: {{$vv.VersionInfo.Patch.End}}},
				},
			},{{end}}
		},
	{{end}}}
}

{{range $i, $v := .PlatformList}}
// With type: {{index $.Types $i}}
func (ua *UserAgent){{index $.Types $i | FirstToUpper}}() (*UserAgent) {
	ua.Platform = platformDB[{{$i}}][rand.Intn(platformSize[{{$i}}])].Random()
	return ua
}
{{end}}

{{range $i, $v := .PlatformList}}{{range $ii, $vv := $v}}// With target: {{$vv.Name}}
func (ua *UserAgent){{$vv.Name | FirstToUpper}}() (*UserAgent) {
	ua.Platform = platformDB[{{$i}}][{{$ii}}].Random()
	return ua
}
{{end}}
{{end}}
`

func firstLetterUpper(s string) string {
	if len(s) < 2 {
		return strings.ToLower(s)
	}

	bts := []byte(s)
	lc := bytes.ToUpper([]byte{bts[0]})
	rest := bts[1:]
	return string(bytes.Join([][]byte{lc, rest}, nil))
}

var funcMap = template.FuncMap{
	"FirstToUpper": firstLetterUpper,
}

func clearFile(path string) error {
	_, err := os.Stat(path)
	if err != nil {
		if os.IsNotExist(err) {
			return nil
		}
		return err
	}

	err = os.Remove(path)
	if err!=nil {
		return err
	}
	return nil
}

func genBotDB(path string, bots interface{}) error {
	// Generate db embedded go program.
	tmpl := template.New(path).Funcs(funcMap)
	mimeTmpl, err := tmpl.Parse(botDBTempl)
	if err != nil {
		return err
	}

	clearFile(path)
	f, err := os.OpenFile(path, os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	err = mimeTmpl.Execute(f, bots)
	if err != nil {
		return err
	}

	return nil
}

func genBrowserDB(path string, browsers interface{}) error {
	// Generate db embedded go program.
	tmpl := template.New(path).Funcs(funcMap)
	mimeTmpl, err := tmpl.Parse(browserDBTempl)
	if err != nil {
		return err
	}

	clearFile(path)
	f, err := os.OpenFile(path, os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	browsersList := surferua.NewBrowserInfoList(browsers.(map[interface{}]interface{}))
	err = mimeTmpl.Execute(f, browsersList)
	if err != nil {
		return err
	}
	return nil
}

func genPlatformDB(path string, platforms interface{}) error {
	// NewPlatformInfoList

	// Generate db embedded go program.
	tmpl := template.New(path).Funcs(funcMap)
	mimeTmpl, err := tmpl.Parse(platformDBTempl)
	if err != nil {
		return err
	}

	clearFile(path)
	f, err := os.OpenFile(path, os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	types, platformsList := surferua.NewPlatformInfoList(platforms.(map[interface{}]interface{}))
	err = mimeTmpl.Execute(f, struct{
		Types []string
		PlatformList [][]*surferua.PlatformInfo
	}{types, platformsList})
	if err != nil {
		return err
	}
	return nil
}

func main() {
	// Take input YAML file from command-line".

	if len(os.Args) != 2 {
		fmt.Print("Syntax:\n\tgen-db /path/to/data.yaml\n")
		os.Exit(1)
	}

	var yamlFile = os.Args[1]

	// Load and convert data.yaml into new database with name
	// as key.

	// Access embedded "db.json" inside go-bindata.
	yamlBytes, err := ioutil.ReadFile(yamlFile)
	if err != nil {
		panic(err)
	}

	var data = map[string]interface{}{}

	if yaml.Unmarshal(yamlBytes, data) != nil {
		panic(err)
	}

	// Generate botDB.go
	bots := data["bots"].(map[interface{}]interface{})
	err = genBotDB("botDB.go", bots)
	if err != nil {
		panic(err)
	}

	// Generate normal browser DB.go
	browsers := data["browsers"].(map[interface{}]interface{})
	err = genBrowserDB("browserDB.go", browsers)
	if err != nil {
		panic(err)
	}

	// Generate normal platform DB.go
	platforms := data["platforms"].(map[interface{}]interface{})
	err = genPlatformDB("platformDB.go", platforms)
	if err != nil {
		panic(err)
	}
}
